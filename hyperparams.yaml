pretrained_path: results\epaca\1988\save\CKPT+2024-01-10+01-48-40+00
################################
# Model: language identification with ECAPA
# Authors: Tanel Alum√§e, 2021
# ################################

# Basic parameters
seed: 1988
__set_seed: !apply:torch.manual_seed [!ref <seed>]
output_folder: !ref results/epaca/<seed>
save_folder: !ref <output_folder>/save
train_log: !ref <output_folder>/train_log.txt
data_folder: data/finalshards/train
rir_folder: !ref <data_folder>
# skip_prep: False

shards_url: ./data/finalshards
train_meta: !ref <shards_url>/dev/meta.json
val_meta: !ref <shards_url>/dev/meta.json
train_shards: !ref <shards_url>/train/shard-{000000..000006}.tar
val_shards: !ref <shards_url>/dev/shard-{000000..000003}.tar

# Set to directory on a large disk if you are training on Webdataset shards hosted on the web
shard_cache_dir:

ckpt_interval_minutes: 5

# Training parameters
number_of_epochs: 40
lr: 0.001
lr_final: 0.0001
sample_rate: 16000
sentence_len: 3 # seconds

# Feature parameters
n_mels: 60
left_frames: 0
right_frames: 0
deltas: false

# Number of speakers
out_n_neurons: 2

train_dataloader_options:
  num_workers: 4
  batch_size: 64

val_dataloader_options:
  num_workers: 1
  batch_size: 32

# Functions
compute_features: !new:speechbrain.lobes.features.Fbank
  n_mels: 60
  left_frames: 0
  right_frames: 0
  deltas: false

embedding_model: !new:speechbrain.lobes.models.ECAPA_TDNN.ECAPA_TDNN
  input_size: 60
  channels: [1024, 1024, 1024, 1024, 3072]
  kernel_sizes: [5, 3, 3, 3, 1]
  dilations: [1, 2, 3, 4, 1]
  attention_channels: 128
  lin_neurons: 256

classifier: !new:speechbrain.lobes.models.Xvector.Classifier
  input_shape: [null, null, 256]
  activation: !name:torch.nn.LeakyReLU
  lin_blocks: 1
  lin_neurons: 512
  out_neurons: !ref <out_n_neurons>

epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
  limit: !ref <number_of_epochs>

augment_speed: !new:speechbrain.lobes.augment.TimeDomainSpecAugment
  sample_rate: !ref <sample_rate>
  speeds: [90, 100, 110]

add_rev_noise: !new:speechbrain.lobes.augment.EnvCorrupt
  openrir_folder: !ref <rir_folder>
  openrir_max_noise_len: 3.0 # seconds
  reverb_prob: 0.5
  noise_prob: 0.8
  noise_snr_low: 0
  noise_snr_high: 15
  rir_scale_factor: 1.0

# Definition of the augmentation pipeline.
# If concat_augment = False, the augmentation techniques are applied
# in sequence. If concat_augment = True, all the augmented signals
# # are concatenated in a single big batch.
augment_pipeline: [!ref <augment_speed>, !ref <add_rev_noise>]

concat_augment: False

mean_var_norm: !new:speechbrain.processing.features.InputNormalization
  norm_type: sentence
  std_norm: false

modules:
  compute_features: !ref <compute_features>
  augment_speed: !ref <augment_speed>
  add_rev_noise: !ref <add_rev_noise>
  embedding_model: !ref <embedding_model>
  classifier: !ref <classifier>
  mean_var_norm: !ref <mean_var_norm>

compute_cost:
  !name:speechbrain.nnet.losses.nll_loss # compute_error: !name:speechbrain.nnet.losses.classification_error


opt_class: !name:torch.optim.Adam
  lr: !ref <lr>
  weight_decay: 0.000002

lr_annealing: !new:speechbrain.nnet.schedulers.LinearScheduler
  initial_value: !ref <lr>
  final_value: !ref <lr_final>
  epoch_count: !ref <number_of_epochs>

# Logging + checkpoints
train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
  save_file: !ref <train_log>
error_stats: !name:speechbrain.utils.metric_stats.MetricStats
  metric: !name:speechbrain.nnet.losses.classification_error
    reduction: batch

checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
  checkpoints_dir: !ref <save_folder>
  recoverables:
    embedding_model: !ref <embedding_model>
    classifier: !ref <classifier>
    normalizer: !ref <mean_var_norm>
    counter: !ref <epoch_counter>
label_encoder: !new:speechbrain.dataio.encoder.CategoricalEncoder

pretrainer: !new:speechbrain.utils.parameter_transfer.Pretrainer
  loadables:
    embedding_model: !ref <embedding_model>
    classifier: !ref <classifier>
    label_encoder: !ref <label_encoder>
  paths:
    embedding_model: !ref <pretrained_path>/embedding_model.ckpt
    classifier: !ref <pretrained_path>/classifier.ckpt
    label_encoder: !ref <pretrained_path>/label_encoder.txt
